diff --git a/src/server/server.cpp b/src/server/server.cpp
index 0430c5f..67b5caa 100644
--- a/src/server/server.cpp
+++ b/src/server/server.cpp
@@ -181,8 +181,21 @@ void Server::broadcast(const QString &command, const QString &jsonData) {
 }
 
 void Server::processNewConnection(ClientSocket *client) {
-  qInfo() << client->peerAddress() << "connected";
-  // version check, file check, ban IP, reconnect, etc
+  auto addr = client->peerAddress();
+  qInfo() << addr << "connected";
+  auto result = SelectFromDatabase(db, QString("SELECT * FROM banip WHERE ip='%1';").arg(addr));
+  if (!result.isEmpty()) {
+    QJsonArray body;
+    body << -2;
+    body << (Router::TYPE_NOTIFICATION | Router::SRC_SERVER |
+             Router::DEST_CLIENT);
+    body << "ErrorMsg";
+    body << "you have been banned!";
+    client->send(JsonArray2Bytes(body));
+    qInfo() << "Refused banned IP:" << addr;
+    client->disconnectFromHost();
+    return;
+  }
 
   connect(client, &ClientSocket::disconnected, this,
           [client]() { qInfo() << client->peerAddress() << "disconnected"; });
@@ -344,7 +357,10 @@ void Server::handleNameAndPassword(ClientSocket *client, const QString &name,
       obj = result[0].toObject();
       // check if this username already login
       int id = obj["id"].toString().toInt();
-      if (!players.value(id)) {
+      passed = obj["banned"].toString().toInt() == 0;
+      if (!passed) {
+        error_msg = "you have been banned!";
+      } else if (!players.value(id)) {
         // check if password is the same
         auto salt = obj["salt"].toString().toLatin1();
         decrypted_pw.append(salt);
diff --git a/src/server/shell.cpp b/src/server/shell.cpp
index 850d727..da4c9d8 100644
--- a/src/server/shell.cpp
+++ b/src/server/shell.cpp
@@ -20,15 +20,25 @@ static void sigintHandler(int) {
 
 void Shell::helpCommand(QStringList &) {
   qInfo("Frequently used commands:");
-#define HELP_MSG(a, b) \
+#define HELP_MSG(a, b)                                                         \
   qInfo((a), Color((b), fkShell::Cyan).toUtf8().constData());
 
   HELP_MSG("%s: Display this help message.", "help");
   HELP_MSG("%s: Shut down the server.", "quit");
   HELP_MSG("%s: List all online players.", "lsplayer");
   HELP_MSG("%s: List all running rooms.", "lsroom");
-  HELP_MSG("%s: Kick a player by his id.", "kick");
+  HELP_MSG("%s: Kick a player by his <id>.", "kick");
   HELP_MSG("%s: Broadcast message.", "msg");
+  HELP_MSG("%s: Ban 1 or more accounts by their <name>.", "ban");
+  HELP_MSG("%s: Unban 1 or more accounts by their <name>.", "unban");
+  HELP_MSG(
+      "%s: Ban 1 or more IP address according to somebody's 'lastLoginIp'. "
+      "At least 1 <name> required.",
+      "banip");
+  HELP_MSG(
+      "%s: Unban 1 or more IP address according to somebody's 'lastLoginIp'. "
+      "At least 1 <name> required.",
+      "unbanip");
   qInfo();
   qInfo("===== Package commands =====");
   HELP_MSG("%s: Install a new package from <url>.", "install");
@@ -160,6 +170,113 @@ void Shell::msgCommand(QStringList &list) {
   ServerInstance->broadcast("ServerMessage", msg);
 }
 
+static void banAccount(sqlite3 *db, const QString &name, bool banned) {
+  if (!CheckSqlString(name))
+    return;
+  QString sql_find = QString("SELECT * FROM userinfo \
+        WHERE name='%1';")
+                         .arg(name);
+  auto result = SelectFromDatabase(db, sql_find);
+  if (result.isEmpty())
+    return;
+  auto obj = result[0].toObject();
+  int id = obj["id"].toString().toInt();
+  ExecSQL(db, QString("UPDATE userinfo SET banned=%2 WHERE id=%1;")
+                  .arg(id)
+                  .arg(banned ? 1 : 0));
+
+  if (banned) {
+    auto p = ServerInstance->findPlayer(id);
+    if (p) {
+      p->kicked();
+    }
+    qInfo("Banned %s.", name.toUtf8().constData());
+  } else {
+    qInfo("Unbanned %s.", name.toUtf8().constData());
+  }
+}
+
+void Shell::banCommand(QStringList &list) {
+  if (list.isEmpty()) {
+    qWarning("The 'ban' command needs at least 1 <name>.");
+    return;
+  }
+
+  auto db = ServerInstance->getDatabase();
+
+  foreach (auto name, list) {
+    banAccount(db, name, true);
+  }
+}
+
+void Shell::unbanCommand(QStringList &list) {
+  if (list.isEmpty()) {
+    qWarning("The 'unban' command needs at least 1 <name>.");
+    return;
+  }
+
+  auto db = ServerInstance->getDatabase();
+
+  foreach (auto name, list) {
+    banAccount(db, name, false);
+  }
+}
+static void banIPByName(sqlite3 *db, const QString &name, bool banned) {
+  if (!CheckSqlString(name))
+    return;
+
+  QString sql_find = QString("SELECT * FROM userinfo \
+        WHERE name='%1';")
+                         .arg(name);
+  auto result = SelectFromDatabase(db, sql_find);
+  if (result.isEmpty())
+    return;
+  auto obj = result[0].toObject();
+  int id = obj["id"].toString().toInt();
+  auto addr = obj["lastLoginIp"].toString();
+
+  if (banned) {
+    ExecSQL(db, QString("INSERT INTO banip VALUES('%1');")
+        .arg(addr));
+
+    auto p = ServerInstance->findPlayer(id);
+    if (p) {
+      p->kicked();
+    }
+    qInfo("Banned IP %s.", addr.toUtf8().constData());
+  } else {
+    ExecSQL(db, QString("DELETE FROM banip WHERE ip='%1';")
+        .arg(addr));
+    qInfo("Unbanned IP %s.", addr.toUtf8().constData());
+  }
+}
+
+void Shell::banipCommand(QStringList &list) {
+  if (list.isEmpty()) {
+    qWarning("The 'banip' command needs at least 1 <name>.");
+    return;
+  }
+
+  auto db = ServerInstance->getDatabase();
+
+  foreach (auto name, list) {
+    banIPByName(db, name, true);
+  }
+}
+
+void Shell::unbanipCommand(QStringList &list) {
+  if (list.isEmpty()) {
+    qWarning("The 'unbanip' command needs at least 1 <name>.");
+    return;
+  }
+
+  auto db = ServerInstance->getDatabase();
+
+  foreach (auto name, list) {
+    banIPByName(db, name, false);
+  }
+}
+
 Shell::Shell() {
   setObjectName("Shell");
   signal(SIGINT, sigintHandler);
@@ -178,6 +295,10 @@ Shell::Shell() {
     handlers["disable"] = &Shell::disableCommand;
     handlers["kick"] = &Shell::kickCommand;
     handlers["msg"] = &Shell::msgCommand;
+    handlers["ban"] = &Shell::banCommand;
+    handlers["unban"] = &Shell::unbanCommand;
+    handlers["banip"] = &Shell::banipCommand;
+    handlers["unbanip"] = &Shell::unbanipCommand;
   }
   handler_map = handlers;
 }
diff --git a/src/server/shell.h b/src/server/shell.h
index 149d6d3..0e4b156 100644
--- a/src/server/shell.h
+++ b/src/server/shell.h
@@ -25,6 +25,10 @@ private:
   void disableCommand(QStringList &);
   void kickCommand(QStringList &);
   void msgCommand(QStringList &);
+  void banCommand(QStringList &);
+  void banipCommand(QStringList &);
+  void unbanCommand(QStringList &);
+  void unbanipCommand(QStringList &);
 };
 
 #endif
